import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from snowflake.snowpark import Session
 
st.markdown("""
## üéØ C√≠l Uk√°zky
 
Hlavn√≠m c√≠lem je uk√°zat, jak **Streamlit** a **Snowflake** spoleƒçnƒõ umo≈æ≈àuj√≠ rychl√Ω v√Ωvoj interaktivn√≠ch aplikac√≠ s jednoduch√Ωm propojen√≠m na AI.
 
## ‚öôÔ∏è Jak to funguje?
 
S vyu≈æit√≠m **Streamlit** pro snadnou tvorbu webov√Ωch aplikac√≠ a propojen√≠m na **Snowflake** m≈Ø≈æeme:
- **Analyzovat data** s pomoc√≠ AI model≈Ø v re√°ln√©m ƒçase
- **Vizualizovat** trendy a struktury v datech interaktivnƒõ
- **Upravovat** p≈ô√≠pady a koment√°≈ôe p≈ô√≠mo v aplikaci
- **P≈ôid√°vat nov√© z√°znamy** d√≠ky jednoduch√Ωm formul√°≈ô≈Øm
 
Tato kombinace poskytuje n√°stroje pro rychl√Ω v√Ωvoj i produkƒçn√≠ nasazen√≠ bez hlubok√Ωch znalost√≠ webov√©ho v√Ωvoje.
""")
 
# Pou≈æit√≠ st√°vaj√≠c√≠ session ve Snowflake Streamlit
session = Session.builder.getOrCreate()
 
# Naƒç√≠t√°n√≠ dat p≈ô√≠mo ze Snowflake s pou≈æit√≠m Snowpark session
def load_cases_data():
    query = """
    SELECT CASE_ID, CUSTOMER_ID, CASE_TYPE, STATUS, PRIORITY, DATE_OPENED, NOTE
    FROM bank_cases
    """
    return session.sql(query).to_pandas()
 
# Naƒçten√≠ dat
cases_df = load_cases_data()
 
# Funkce pro z√≠sk√°n√≠ maxim√°ln√≠ho ID z datab√°ze
def get_max_case_id():
    query = "SELECT MAX(CASE_ID) AS max_id FROM bank_cases"
    result = session.sql(query).collect()
    return result[0]['MAX_ID'] + 1 if result[0]['MAX_ID'] is not None else 1
 
# EDA - Porovn√°n√≠ struktury p≈ô√≠pad≈Ø za posledn√≠ch 14 dn√≠ vs. celkov√© obdob√≠
st.title("Uk√°zka:")
st.markdown("---")
 
def calculate_case_structure(df, period="Celkov√© obdob√≠"):
    case_structure = df.groupby(['CASE_TYPE', 'PRIORITY']).size().reset_index(name=f'{period} (%)')
    case_structure[f'{period} (%)'] = (case_structure[f'{period} (%)'] / case_structure[f'{period} (%)'].sum()) * 100
    return case_structure
 
# Filtrov√°n√≠ na posledn√≠ch 14 dn√≠
recent_cases_df = cases_df[cases_df['DATE_OPENED'] >= (datetime.now() - timedelta(days=14)).date()]
 
# Spojen√≠ celkov√©ho obdob√≠ a posledn√≠ch 14 dn≈Ø
total_structure = calculate_case_structure(cases_df, "Celkov√© obdob√≠")
recent_structure = calculate_case_structure(recent_cases_df, "Posledn√≠ch 14 dn√≠")
merged_structure = total_structure.merge(recent_structure, on=["CASE_TYPE", "PRIORITY"], how="outer").fillna(0)
 
# V√Ωpoƒçet rozd√≠lu
merged_structure['DIFF_PERCENT'] = merged_structure['Posledn√≠ch 14 dn√≠ (%)'] - merged_structure['Celkov√© obdob√≠ (%)']
 
 
# Vizualizace sloupcov√©ho grafu pro porovn√°n√≠ struktury podle typu p≈ô√≠padu a priority
st.subheader("Porovn√°n√≠ struktury p≈ô√≠pad≈Ø - Celkov√© obdob√≠ vs. Posledn√≠ch 14 dn√≠")
fig_compare = go.Figure()
colors = ['#a2d5f2', '#ffa07a']
for idx, priority in enumerate(merged_structure['PRIORITY'].unique()):
    priority_data = merged_structure[merged_structure['PRIORITY'] == priority]
    fig_compare.add_trace(go.Bar(
        x=priority_data['CASE_TYPE'],
        y=priority_data['Celkov√© obdob√≠ (%)'],
        name=f'Celkov√© obdob√≠ ({priority})',
        marker_color=colors[0]
    ))
    fig_compare.add_trace(go.Bar(
        x=priority_data['CASE_TYPE'],
        y=priority_data['Posledn√≠ch 14 dn√≠ (%)'],
        name=f'Posledn√≠ch 14 dn√≠ ({priority})',
        marker_color=colors[1],
    ))
 
fig_compare.update_layout(
    barmode='group',
    xaxis_title="Typ p≈ô√≠padu",
    yaxis_title="Procento",
    title="Porovn√°n√≠ struktury p≈ô√≠pad≈Ø podle typu a priority",
    showlegend=True
)
st.plotly_chart(fig_compare)
 
# Shrnut√≠ rozd√≠l≈Ø jako text pro Cortex
summary_text = "Analyzujte rozd√≠ly v procentech mezi celkov√Ωm obdob√≠m a posledn√≠mi 14 dny:\n"
for _, row in merged_structure.iterrows():
    summary_text += f"Typ p≈ô√≠padu: {row['CASE_TYPE']}, Priorita: {row['PRIORITY']}, Rozd√≠l: {row['DIFF_PERCENT']:.2f}%\n"
 
# P≈ôed√°n√≠ textu do Cortexu bez parametrizace
def analyze_with_cortex(summary):
    query = f"SELECT snowflake.cortex.COMPLETE('llama3.2-3b','{summary}') AS INTERPRETATION"
    result = session.sql(query).collect()
    return result[0][0] if result else "≈Ω√°dn√© v√Ωsledky."
 
# Tlaƒç√≠tko pro generov√°n√≠ interpretace
if st.button("Zobrazit interpretaci rozd√≠l≈Ø"):
    comments = analyze_with_cortex(summary_text)
    #st.subheader("Koment√°≈ôe k rozd√≠l≈Øm:")
    with st.expander("Koment√°≈ôe k rozd√≠l≈Øm", expanded=True):
        st.write(comments)
 
st.markdown("---")
 
# Interaktivn√≠ tabulka nejrizikovƒõj≈°√≠ch p≈ô√≠pad≈Ø
st.subheader("Nejrizikovƒõj≈°√≠ p≈ô√≠pady za posledn√≠ch 14 dn√≠")
recent_high_risk = recent_cases_df[recent_cases_df['PRIORITY'] == 'Vysok√°'].head(10)
 
# Umo≈ænƒõn√≠ √∫prav sloupc≈Ø STATUS a Pozn√°mka
editable_df = recent_high_risk[['CASE_ID', 'CUSTOMER_ID', 'CASE_TYPE', 'PRIORITY', 'STATUS', 'NOTE']].copy()
editable_df = editable_df.rename(columns={'NOTE': 'Pozn√°mka'})
editable_df['CUSTOMER_ID'] = editable_df['CUSTOMER_ID'].apply(lambda x: '{:,.0f}'.format(x).replace(',', ' '))
 
# Interaktivn√≠ √∫prava s v√Ωbƒõrem mo≈ænosti pro sloupec STATUS
status_options = ["Otev≈ôeno", "≈òe≈°eno", "Uzav≈ôeno"]
editable_df['STATUS'] = editable_df['STATUS'].astype("category")
 
# Zobrazen√≠ upraviteln√© tabulky s novou funkc√≠ `st.data_editor`
edited_df = st.data_editor(editable_df, use_container_width=True, hide_index=True)
 
# Ulo≈æen√≠ zmƒõn do datab√°ze
if st.button("Ulo≈æit zmƒõny stav≈Ø a pozn√°mky"):
    for _, row in edited_df.iterrows():
        case_id = row['CASE_ID']
        new_status = row['STATUS']
        note = row['Pozn√°mka']
        update_query = f"""
        UPDATE bank_cases
        SET STATUS = '{new_status}', NOTE = '{note}'
        WHERE CASE_ID = {case_id}
        """
        session.sql(update_query).collect()
    st.success("Zmƒõny stav≈Ø a pozn√°mky byly ulo≈æeny do datab√°ze.")
 
# Formul√°≈ô pro p≈ôid√°n√≠ nov√©ho p≈ô√≠padu
st.sidebar.header("P≈ôidat nov√Ω p≈ô√≠pad")
 
# Mo≈ænost zadat nov√© ID, nebo pou≈æ√≠t automatick√© nav√Ω≈°en√≠
max_case_id = get_max_case_id()
new_case_id = st.sidebar.number_input("ID nov√©ho p≈ô√≠padu", min_value=max_case_id, value=max_case_id)
 
new_case_type = st.sidebar.selectbox("Typ p≈ô√≠padu", ["Reklamace transakce", "≈Ω√°dost o √∫vƒõr", "Zmƒõna limitu", "Zablokov√°n√≠ karty"])
new_customer_id = st.sidebar.number_input("ID z√°kazn√≠ka", min_value=1000, max_value=1050)
new_priority = st.sidebar.selectbox("Priorita", ["Vysok√°", "St≈ôedn√≠", "N√≠zk√°"])
 
if st.sidebar.button("P≈ôidat nov√Ω p≈ô√≠pad"):
    insert_query = f"""
    INSERT INTO bank_cases (CASE_ID, CUSTOMER_ID, CASE_TYPE, STATUS, PRIORITY, DATE_OPENED, NOTE)
    VALUES ({new_case_id}, {new_customer_id}, '{new_case_type}', 'Otev≈ôeno', '{new_priority}', CURRENT_DATE(), NULL)
    """
    session.sql(insert_query).collect()
    st.sidebar.success("Nov√Ω p≈ô√≠pad byl p≈ôid√°n")
 
st.markdown("---")
 
# Sunburst graf pro strukturu p≈ô√≠pad≈Ø s jemnƒõj≈°√≠mi barvami
st.subheader("Struktura p≈ô√≠pad≈Ø dle priority a typu (Sunburst)")
 
fig_sunburst = px.sunburst(
    cases_df,
    path=['PRIORITY', 'CASE_TYPE'],
    values='CUSTOMER_ID',
    color='PRIORITY',
    color_discrete_map={'Vysok√°': '#ff7f7f', 'St≈ôedn√≠': '#ffd700', 'N√≠zk√°': '#90ee90'},
)
fig_sunburst.update_layout(margin=dict(t=0, l=0, r=0, b=0))
st.plotly_chart(fig_sunburst, use_container_width=True)
